#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

struct Task{
int completed;
char description[MAX];
};
struct Task tasks[MAX];
int taskCount=0;

/*function to display the to-do list*/
void display(){
printf("\nTo do list:\n");
for(int i=0;i<taskCount;i++){
printf("%d. [%s] %s\n",i+1,tasks[i].completed?"X":" ",tasks[i].description);
}
}

/*function to add a task in the list*/
void addTask(){
if(taskCount>=MAX){
printf("\nTHE LIMIT IS REACHED!!!!NO MORE TASKS CAN BE ADDED");
}
else{
printf("\nenter the description of the task:");
scanf(" %[^\n]",tasks[taskCount].description);
tasks[taskCount].completed=0;
taskCount++;
printf("\ntask added");
}
}

/*function to edit the task*/
void editTask(){
int n;
printf("\nenter the task number to be edited:");
scanf("%d",&n);
if(n>=0 && n<taskCount){
printf("\n enter the new task description:");
scanf("%s",tasks[n-1].description);
printf("\nthe task has been edited!!");
}
else{
printf("\n invalid input of task number");
}
}

/*function to mark a task as completed*/
void taskCompleted(){
int N;
printf("\n enter the no. of task to be marked as completed:");
scanf("%d",&N);
if(N>=0 && N<=taskCount){
tasks[N-1].completed=1;
printf("\n the task is marked as completed");
}
else{
printf("\n invalid input of task number");
}
}

/*function for deleting a task from the list*/
void deleteTask(){
int n;
printf("\n enter the task no. to be deleted:");
scanf("%d",&n);
if(n>=0 && n<taskCount){
for(int i=n-1;i<taskCount-1;i++){
strcpy(tasks[i].description, tasks[i+1].description);
tasks[i].completed=tasks[i+1].completed;
}
taskCount--;
printf("\n the task has been deleted");
}
else{
printf("\n invalid input of task number");
}
}

/*main function*/
int main(){
int ch;
do{
printf("\n\n\tMENU");
printf("\n1.display the list\n2.add a task\n3.edit a task\n4.mark a task as completed\n5.delete a task\n6.Exit");
printf("\nenter your choice:");
scanf("%d",&ch);

switch(ch){

case 1:
display();
break;

case 2:
addTask();
break;

case 3:
editTask();
break;

case 4:
taskCompleted();
break;

case 5:
deleteTask();
break;

default:
exit(0);
}
}while(ch!=6);

return 0;
}

